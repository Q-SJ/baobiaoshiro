/**
 * This class is generated by jOOQ
 */
package com.iot.baobiao.jooq.tables;


import com.iot.baobiao.jooq.Keys;
import com.iot.baobiao.jooq.Nutch;
import com.iot.baobiao.jooq.tables.records.RolesPermissionsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesPermissions extends TableImpl<RolesPermissionsRecord> {

    private static final long serialVersionUID = -490589506;

    /**
     * The reference instance of <code>nutch.roles_permissions</code>
     */
    public static final RolesPermissions ROLES_PERMISSIONS = new RolesPermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolesPermissionsRecord> getRecordType() {
        return RolesPermissionsRecord.class;
    }

    /**
     * The column <code>nutch.roles_permissions.id</code>.
     */
    public final TableField<RolesPermissionsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>nutch.roles_permissions.role</code>.
     */
    public final TableField<RolesPermissionsRecord, String> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * The column <code>nutch.roles_permissions.permission</code>.
     */
    public final TableField<RolesPermissionsRecord, String> PERMISSION = createField("permission", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

    /**
     * Create a <code>nutch.roles_permissions</code> table reference
     */
    public RolesPermissions() {
        this("roles_permissions", null);
    }

    /**
     * Create an aliased <code>nutch.roles_permissions</code> table reference
     */
    public RolesPermissions(String alias) {
        this(alias, ROLES_PERMISSIONS);
    }

    private RolesPermissions(String alias, Table<RolesPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolesPermissions(String alias, Table<RolesPermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nutch.NUTCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RolesPermissionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ROLES_PERMISSIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RolesPermissionsRecord> getPrimaryKey() {
        return Keys.KEY_ROLES_PERMISSIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RolesPermissionsRecord>> getKeys() {
        return Arrays.<UniqueKey<RolesPermissionsRecord>>asList(Keys.KEY_ROLES_PERMISSIONS_PRIMARY, Keys.KEY_ROLES_PERMISSIONS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RolesPermissions as(String alias) {
        return new RolesPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    public RolesPermissions rename(String name) {
        return new RolesPermissions(name, null);
    }
}
